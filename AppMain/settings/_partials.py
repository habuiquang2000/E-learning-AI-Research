"""
Django settings for AppMain project.

Generated by "django-admin startproject" using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from django.contrib import admin
import os
from environ import Env
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = os.path.join(Path(__file__).resolve().parent.parent, "..")
ENV = Env(
    DEBUG=(bool, False)
)
Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV("SECRET_KEY")

ALLOWED_HOSTS = ["*"]
CORS_ALLOWED_ORIGINS = [
    "http://localhost",
    "http://localhost:3000",
    "http://127.0.0.1",
    "http://0.0.0.0",
]
CORS_ALLOW_CREDENTIALS = True
SECURE_CROSS_ORIGIN_OPENER_POLICY = None
# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "django.contrib.postgres",
    "corsheaders",
    "ckeditor",
    "ckeditor_uploader",

    "gTTSApp",
    "LogsHistory.apps.LogshistoryConfig",
    "RestApi.apps.RestapiConfig",
    "Home.apps.HomeConfig",
    "Consulting.apps.ConsultingConfig",
    "Document.apps.DocumentConfig",
    "About.apps.AboutConfig",
    "SystemUser.apps.SystemuserConfig",
    "SystemTeacher.apps.SystemteacherConfig",

    # "celery",
    "catching_error",
    # "config",
    # "import_export",
]
# myproject/setting.py
# set my ordering list
# ADMIN_ORDERING = [
#     (
#         "Document", [
#             "",
#             "",
#             "",
#             "",
#         ],
#         "auth", [
#             "User",
#             "Group"
#         ],
#     ),
# ]
# Creating a sort function

# "core/settings.py"
# https://github.com/django/django/blob/c914d6cff176ae6bfab2f33a84bcfd45208f1894/django/contrib/admin/sites.py#L533
# https://stackoverflow.com/questions/398163/ordering-admin-modeladmin-objects-in-django-admin
# https://www.google.com/search?q=django+admin+model+order&rlz=1C1ONGR_enVN1075VN1075&oq=django+admin+model+%E1%BB%8Fder&gs_lcrp=EgZjaHJvbWUqCwgBEAAYDRgTGIAEMgYIABBFGDkyCwgBEAAYDRgTGIAE0gEJMTI1MThqMGo3qAIAsAIA&sourceid=chrome&ie=UTF-8
ADMIN_ORDERING = (
    ("Consulting", (
        "Question",
        "Answer",
    )),
    ("Document", (
        "Category",
        "Subject",
        "Chapter",
        "Lesson",
    )),
    ("auth", (
        "User",
        "Group"
    )),
)


def get_app_list(self, request, app_label=None):
    app_dict = self._build_app_dict(request, app_label)

    if not app_dict:
        return

    NEW_ADMIN_ORDERING = []
    if app_label:
        for ao in ADMIN_ORDERING:
            if ao[0] == app_label:
                NEW_ADMIN_ORDERING.append(ao)
                break

    if not app_label:
        for app_key in list(app_dict.keys()):
            if not any(app_key in ao_app for ao_app in ADMIN_ORDERING):
                app_dict.pop(app_key)

    app_list = sorted(
        app_dict.values(),
        key=lambda x: [ao[0] for ao in ADMIN_ORDERING].index(x["app_label"])
    )

    for app, ao in zip(app_list, NEW_ADMIN_ORDERING or ADMIN_ORDERING):
        if app["app_label"] == ao[0]:
            for model in list(app["models"]):
                if not model["object_name"] in ao[1]:
                    app["models"].remove(model)
        app["models"].sort(key=lambda x: ao[1].index(x["object_name"]))
    return app_list

# def get_app_list(self, request):
#     app_dict = self._build_app_dict(request)
#     for app_name, object_list in app_dict.items():
#         if app_name in ADMIN_ORDERING:
#             app = app_dict[app_name]
#             app["models"].sort(
#                 key=lambda x: ADMIN_ORDERING[app_name].index(x["object_name"])
#             )
#             app_dict[app_name]
#             yield app
#         else:
#             yield app_dict[app_name]


# Covering django.contrib.admin.AdminSite.get_app_list
admin.AdminSite.get_app_list = get_app_list

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",

    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",

    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "AppMain.request_info.simple_middleware"
]

ROOT_URLCONF = "AppMain.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [path.strip() for path in ENV("TEMPLATES_DIRS").split(",")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "_scope.subjects.subject_list",
                "_scope.categories.category_list",
            ],
        },
    },
]

WSGI_APPLICATION = "AppMain.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": ENV("DATABASE_ENGINE"),
        "NAME": ENV("DATABASE_NAME"),
        "USER": ENV("DATABASE_USER"),
        "PASSWORD": ENV("DATABASE_PASSWORD"),
        "HOST": ENV("DATABASE_HOST"),
        "PORT": ENV("PG_DATABASE_PORT"),
    }
}
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
IMPORT_EXPORT_USE_TRANSACTIONS = True

# LANGUAGES = [
#     ("ka", _("Georgian")),
#     ("ru", _("Russian")),
#     ("en", _("English")),
# ]
LANGUAGE_CODE = ENV("LANGUAGE_CODE")
LOCALE_PATHS = (
    os.path.join(BASE_DIR, "locale"),
)

TIME_ZONE = ENV("TIME_ZONE")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"

CKEDITOR_JQUERY_URL = "https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"


CKEDITOR_CONFIGS = {
    "awesome_ckeditor": {
        "toolbar": "full",
    },
    "default": {
        "toolbar": "full",
        "height": 456,
        "width": 656,
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# CART_SESSION_SLUG = "cart"

# # ---------------- Local Settings ---------------------------------------
# # Put your local settings in config directory to override this settings
# # File name should be local_settings.py
# try:
#     from .local_settings import *
# except ImportError:
#     print("No Local Settings Found")

# # ---------------- End Local Settings ------------------------------------

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# AUTH_USER_MODEL = "accounts.Account"
# AUTH_USER_MODEL = "users.User"


# CELERY_BROKER_URL = "redis://redis:6379/0"
# CELERY_BACKEND_URL = "redis://redis:6379/0"
# CELERY_RESULT_BACKEND = "redis://redis:6379/0"


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["console"],
#             "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
#         },
#         "celery": {
#             "handlers": ["console"],
#             "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
#         },
#     },
# }
